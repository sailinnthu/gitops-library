apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMrVENDQWVHZ0F3SUJBZ0lVREtCekt3Vkt5WFgybUk2R3NJMjl4REFIWFE0d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0RERUtNQWdHQTFVRUF3d0JLakFlRncweU1UQTNNall4TlRVd01UbGFGdzB5TWpBM01qWXhOVFV3TVRsYQpNQXd4Q2pBSUJnTlZCQU1NQVNvd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN6CnhvZCtodmtneldMS1V2TlFZWnVINjVuRmliQjJINm5BTG51bUJZMENibDBaZU4ydW9rRFVVTXk1TC9lS2llazYKTDRqSHJKU3RiTjBUemhmTEovRG1KdW9RQUNSS3FHZzlCdlg4R2wyTHF2SDB3dk93d1hCVCsrSVhhWUxYbXB4NgpWM2t6Z2ZoMW5taUVDU1d5NFd5OVRvajBDY0JJUkdHNDlubTBlcEFBdnJCa0JEdnFZZHAyN0lhdjBBbXBHZjlkCmphbnZKWGZEMTNhS0YvbkZZUXdsUm96MlBwdkNIY296M0pBM2pWczIzaW4rb09jV21LRVJwMXZwTU1TRXR1UTMKQ3lKdzZWS01JU2srZ2RLSDlHWllaQlFtZlY4U0FCcTZRUVFNbmp2dzZVSnVUa2M5RzJpUm5rcXRvQmxYY241RwpuNUhiYkpIWmNVY09sbTNPMXpKM0FnTUJBQUdqVXpCUk1CMEdBMVVkRGdRV0JCUllSa0FnaVVPK2hQOWFubzJTCm43RkFJMTFGT2pBZkJnTlZIU01FR0RBV2dCUllSa0FnaVVPK2hQOWFubzJTbjdGQUkxMUZPakFQQmdOVkhSTUIKQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDdXp6Tm1PdUtETkJvbXQwV1hJWXhnSGNXKwppamNMUlZDUElabXdlRmwyZnF2cWdKYzNYKzNGQlRJZWVnd0pkQjhxU0NMSG5QY2IwdUJ4VVFUSDJWbld1blFvCjcyN0prN25TRnRjMUJya2tOSjF5K1lXQnJUVVBranJhR1JaVGMxaFdJUDN6SS9zNlhRWEpNQVJMTS85Z3dDU1kKSTBmVk14SWIySlFkQmlNVURucUt3Q0psY25ISnhaeHpUUmcyZnlUV3dubHpDRFRXQmNkMDBsVkh3NTNody9JZAowV1d1NTRPNWkvM3hPSkRMUFFscDMzMzg0UDE5ODZZZExSaFNiVlBJRk14c051SGpKN3l1WGY4OThqVy9WRHl0Cis0MVlzU2hNbC9xeENFdk01b1VFaDlwaG5uZGlWVUFaSjZvdGVzclpGU3NKRTVtSEl5N25xNlFBQW5TSAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ3p4b2QraHZrZ3pXTEsKVXZOUVladUg2NW5GaWJCMkg2bkFMbnVtQlkwQ2JsMFplTjJ1b2tEVVVNeTVML2VLaWVrNkw0akhySlN0Yk4wVAp6aGZMSi9EbUp1b1FBQ1JLcUdnOUJ2WDhHbDJMcXZIMHd2T3d3WEJUKytJWGFZTFhtcHg2VjNremdmaDFubWlFCkNTV3k0V3k5VG9qMENjQklSR0c0OW5tMGVwQUF2ckJrQkR2cVlkcDI3SWF2MEFtcEdmOWRqYW52SlhmRDEzYUsKRi9uRllRd2xSb3oyUHB2Q0hjb3ozSkEzalZzMjNpbitvT2NXbUtFUnAxdnBNTVNFdHVRM0N5Snc2VktNSVNrKwpnZEtIOUdaWVpCUW1mVjhTQUJxNlFRUU1uanZ3NlVKdVRrYzlHMmlSbmtxdG9CbFhjbjVHbjVIYmJKSFpjVWNPCmxtM08xekozQWdNQkFBRUNnZ0VCQUxDRGthNHVJSmFRa3h0TTd4SlJoRUNrbDh0Wk1pWUpXTWNWM05wYVFPWE8KTHlNL2hZcGVUWUVxQkprZis5SFBMMnl1RjRMV2RQVURHdDdEVUtGc2loK3d2Y2tRR3BJallKWHJLOE5vcjhqZgpBOHJyVUJLUkhCV2FENWdsUlE4bEE5Y3I1QmtxMkNYRWI2S1V5S3NtbzNvTWpuUHV6eGtsNnoyTTVGck1yRy9OCkplTDVza1lzdjZjbUFLbHMyd1JzVjZlTTJFOVJVVGVJZjJ0QnVFaDdZL1NpR0h3Z1lOTzF1RFBwSXpnZG5wQkgKUWQ2d2hNS0hUNFdvdnJqcGhtRXRzMGxEY0ZaN3lJaUZFOW1OTVlzMEc1bDBJNHFjZHBPM3lpTncxK2g0MUt5NgpaR2JaS2ZoMU5jNWVqeDhnTEc1RS9UMUZYL2EzRVlhY1EzWnhxZmEyemFFQ2dZRUE0VkJmSDZPUWtiditGOUdJCnp6VFY2MzJkSmNyR0hmbmtZVnRpYmNkZ2d2ZnFmcWZvTTY0MG1KOFZaaUFwczk2VHZWa1YvTWFDaExpZitRa3kKQkJoRlRYNnh1WGlndGVCdEExOC94WWRYc3ZNLzA4TnRVSndoVDFubnVVQXRDckd3L2JvdUZFZWtYQkwvL2p1awp1cDd3KzR4a3F5djAycjFId3o1bFcram43QTBDZ1lFQXpFSnl1VE1yRTVoMHlwQmdNZDhveFJKWjlacS9EVjUyCmtHS3hwbDR6U0R2MXduZ3Z2N3FVRnJxSkNxeFdCV2JnU2ZhazQyVHV4OGVjU1h5RTM0b2pUdngrN1hsREI4QlMKTndoRFM2OFl4Rll6TEtTd21rNnFmdEhaQkN0YzhpVFN0RUNLUGtBKzVhYklVZlhrTjdrV3pBQUFFR2tCc3pSYwpCQmpNNUp0Z2c1TUNnWUJ2M2pMTWg2NXczVEVFYkhHTHg0VHEzanhYRmoyVmhvd2cxbm1oWGR1S1MwTXZUWGlaCnFFWE8vVFZudGxKZVR3VjFmclRQQTFTc1J1cU9nRVZJQ1REbmtCNzNvbS9RdmJRQ2Q1azNIc0twUStNTjVqcngKU2dPejNVU1RFczBLUVQxS1ROVXlGbndCaHlGNC9lNEZCb05Kc2VRTnBNNTJpSUlINjRQeHhVclpSUUtCZ0Vzdwp4c1NRSm5KUE0rY0JZTGZiRzBuNGFHODE2TkNHRG9VMkg0bExzZnNNUDNxMy9YUEp2Z3ZqM09DMThmQ0pIMVY2CjJ0WHVhTXZZR2hzZklGYWRwa1BFUlFFc0cxVzJJVTJxMkFMN1VOV3RtYWI4ZFJwSWpSQ2tOUXdJM20wd3l2T1oKc29vWjRrMXRxTjRxOHpqa0JKVlNCclFEdzZGeFM5SWlRd0tBZy9YTEFvR0FlTjdkRDQvNzllSUpDb0VDdEJZTgpLTjJoNEx5VWJpZzhzUnFxRlRmdWFLNnlBOXpaWUpwcjBPQXFyWDdRU2w2RFRLcjFzKzZ6Ny9YRzE3ZWp1VEw1CitUZHdjYWd1RDY0VVg4cSt1MFZwTjFPNU45QjNTa1ZXazYvTXdLZVhmU0tuTHBoam5nLzJHUUR0NGRwdWdOUTcKcXZQejFzYlpsN1oweFFSK0pGc0xVZnc9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  name: upstream-tls
  namespace: gloo-system
type: kubernetes.io/tls
---
apiVersion: v1
kind: Secret
metadata:
  name: okta-client-secret
  namespace: gloo-system
type: extauth.solo.io/oauth
data:
  client-secret: X02TOVBKNTJOcFVKbzhIajJuRTR5ajkwaFg0QkZrVzYxU2RhWEpmRQ==
---
apiVersion: enterprise.gloo.solo.io/v1
kind: AuthConfig
metadata:
  name: httpbin-okta
  namespace: gloo-system
spec:
  configs:
  - oauth2:
      oidcAuthorizationCode:
        appUrl: https://httpbin-local.glootest.com/productpage
        callbackPath: /callback
        clientId: 0oa4zoq0foGKtOSpg5d7
        clientSecretRef:
          name: okta-client-secret
          namespace: gloo-system
        issuerUrl: https://dev-22653158.okta.com/oauth2/default
        scopes:
        - email
---
apiVersion: gateway.solo.io/v1
kind: VirtualService
metadata:
  name: httpbin-vs
  namespace: gloo-system
spec:
  sslConfig:
    secretRef:
      name: upstream-tls
      namespace: gloo-system
  virtualHost:
    domains:
    - 'httpbin-local.glootest.com'
    options:
      extauth:
        configRef:
          name: httpbin-okta
          namespace: gloo-system
      rateLimitConfigs:
        refs:
        - name: global-limit
          namespace: gloo-system
      transformations:
        responseTransformation:
          transformationTemplate:
            body:
              text: '{% if header(":status") == "429" %}<html><body style="background-color:powderblue;"><h1>Too
                many Requests!</h1><p>Try again after 10 seconds</p></body></html>{%
                else %}{{ body() }}{% endif %}'
            parseBodyBehavior: DontParse
      waf:
        auditLogging:
          action: ALWAYS
          location: FILTER_STATE
        coreRuleSet:
          customSettingsString: "# default rules section\nSecRuleEngine On\nSecRequestBodyAccess
            On\nSecDefaultAction \"phase:1,log,auditlog,pass,status:403\"\nSecDefaultAction
            \"phase:2,log,auditlog,pass,status:403\"\n#\n# custom rules section\n#\n#
            -=[ Deny when a semi-colon is found in the 'ip' parameter ]=-\nSecRule
            ARGS:ip \";\" \"t:none,log,deny,msg:'semi-colon detected in ip parameter',id:2\"\n#\n#
            \n# -=[ block incoming request if argument `?param1=test` ]=-\nSecRule
            ARGS:param1 \"test\" \"id:1,deny,msg:'failed test - param1=test'\"\n#\n#
            \n# -=[ block incoming request if header is set to User-Agent: scammer
            ]=-\nSecRule REQUEST_HEADERS:User-Agent \"scammer\" \"deny,status:403,id:107,phase:1,msg:'blocked
            scammer'\"\n#\n# \n# -=[ block incoming requests that do not match the
            ip below ]=-\n#SecRule REMOTE_ADDR \"!@ipMatch 173.175.0.0/16\" \"phase:1,deny,status:403,id:1,msg:'block
            ip'\"\n#\n# \n# -=[ only allow http2 connections ]=-\nSecAction \\\n  \"id:900230,\\\n
            \   phase:1,\\\n    nolog,\\\n    pass,\\\n    t:none,\\\n    setvar:'tx.allowed_http_versions=HTTP/2
            HTTP/2.0'\"\n#\n#\n# -=[ allow only letters in username ]=-\nSecRule ARGS:/username/
            \"[^a-zA-Z]\" \"t:none,phase:2,deny,id:6,log,msg:'allow only letters in
            username'\"\n#\n#\n# -=[ Block Countries ]=-\n# Rules in the IP Reputation
            file can check the client against a list of high\n# risk country codes.
            These countries have to be defined in the variable\n# tx.high_risk_country_codes
            via their ISO 3166 two-letter country code:\n# https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\n#SecAction
            \\\n# \"id:900600,\\\n#  phase:1,\\\n#  nolog,\\\n#  pass,\\\n#  t:none,\\\n#
            \ msg:'requests from this country code are not allowed',\\\n#  setvar:'tx.high_risk_country_codes=UA
            ID YU LT EG RO BG TR RU PK MY CN'\"\n#\n#\n# -- [[ End of setup ]] --------------------------------------------------------\n#\n#
            The CRS checks the tx.crs_setup_version variable to ensure that the setup\n#
            has been loaded. If you are not planning to use this setup template,\n#
            you must manually set the tx.crs_setup_version variable before including\n#
            the CRS rules/* files.\n#\n# The variable is a numerical representation
            of the CRS version number.\n# E.g., v3.0.0 is represented as 300.\n#\nSecAction
            \\\n\"id:900990,\\\n  phase:1,\\\n  nolog,\\\n  pass,\\\n  t:none,\\\n
            \     setvar:tx.crs_setup_version=310\"\n"
        customInterventionMessage: 'ModSecurity intervention! Please check access
          logs for more details: kubectl -n gloo-system logs deploy/gateway-proxy
          -f'
    routes:
    - matchers:
      - prefix: /
      routeAction:
        single:
          upstream:
            name: httpbin-httpbin-8000
            namespace: gloo-system